// <auto-generated />
using System;
using Gestao_de_Estacionamentos.Infraestutura.Orm.Compartilhado;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Gestao_de_Estacionamentos.Infraestutura.Orm.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250922043456_Migracao final")]
    partial class Migracaofinal
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Gestao_de_Estacionamentos.Core.Dominio.ModuloEstacionamento.Vaga", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("EstaOcupada")
                        .HasColumnType("boolean");

                    b.Property<int>("NumeroVaga")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("NumeroVaga"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("NumeroVaga"), 1L, null, null, null, null, null);

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uuid");

                    b.Property<char>("Zona")
                        .HasColumnType("char(1)");

                    b.HasKey("Id");

                    b.HasIndex("NumeroVaga")
                        .IsUnique()
                        .HasDatabaseName("UQ_Vaga_NumeroVaga");

                    b.ToTable("Vagas");
                });

            modelBuilder.Entity("Gestao_de_Estacionamentos.Core.Dominio.ModuloFaturamento.Cargo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Gestao_de_Estacionamentos.Core.Dominio.ModuloFaturamento.Fatura", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DataEntrada")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataSaida")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PlacaVeiculo")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<Guid?>("RelatorioId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Valortotal")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("RelatorioId");

                    b.ToTable("Faturas");
                });

            modelBuilder.Entity("Gestao_de_Estacionamentos.Core.Dominio.ModuloFaturamento.Relatorio", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DataFinal")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataInicial")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("ValorTotal")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Relatorio");
                });

            modelBuilder.Entity("Gestao_de_Estacionamentos.Core.Dominio.ModuloFaturamento.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Gestao_de_Estacionamentos.Core.Dominio.ModuloRecepcao.CheckIn", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("CheckIns");
                });

            modelBuilder.Entity("Gestao_de_Estacionamentos.Core.Dominio.ModuloRecepcao.EntidadeTicket.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CheckInId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DataHoraEntrada")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataHoraSaida")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("NumeroSequencial")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("NumeroSequencial"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("NumeroSequencial"), 1L, null, null, null, null, null);

                    b.Property<int>("StatusTicket")
                        .HasColumnType("integer");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CheckInId")
                        .IsUnique();

                    b.HasIndex("NumeroSequencial")
                        .IsUnique()
                        .HasDatabaseName("UQ_Ticket_NumeroSequencial");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Gestao_de_Estacionamentos.Core.Dominio.ModuloRecepcao.EntidadeVeiculo.Veiculo", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CheckInId")
                        .HasColumnType("uuid");

                    b.Property<string>("Cor")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Observacoes")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Placa")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<Guid?>("TicketId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("VagaId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CheckInId")
                        .IsUnique();

                    b.HasIndex("VagaId")
                        .IsUnique();

                    b.ToTable("Veiculos");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Gestao_de_Estacionamentos.Core.Dominio.ModuloFaturamento.Fatura", b =>
                {
                    b.HasOne("Gestao_de_Estacionamentos.Core.Dominio.ModuloFaturamento.Relatorio", null)
                        .WithMany("Faturas")
                        .HasForeignKey("RelatorioId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Gestao_de_Estacionamentos.Core.Dominio.ModuloRecepcao.EntidadeTicket.Ticket", b =>
                {
                    b.HasOne("Gestao_de_Estacionamentos.Core.Dominio.ModuloRecepcao.CheckIn", "CheckIn")
                        .WithOne("Ticket")
                        .HasForeignKey("Gestao_de_Estacionamentos.Core.Dominio.ModuloRecepcao.EntidadeTicket.Ticket", "CheckInId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CheckIn");
                });

            modelBuilder.Entity("Gestao_de_Estacionamentos.Core.Dominio.ModuloRecepcao.EntidadeVeiculo.Veiculo", b =>
                {
                    b.HasOne("Gestao_de_Estacionamentos.Core.Dominio.ModuloRecepcao.CheckIn", "CheckIn")
                        .WithOne("Veiculo")
                        .HasForeignKey("Gestao_de_Estacionamentos.Core.Dominio.ModuloRecepcao.EntidadeVeiculo.Veiculo", "CheckInId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gestao_de_Estacionamentos.Core.Dominio.ModuloEstacionamento.Vaga", "Vaga")
                        .WithOne("VeiculoEstacionado")
                        .HasForeignKey("Gestao_de_Estacionamentos.Core.Dominio.ModuloRecepcao.EntidadeVeiculo.Veiculo", "VagaId");

                    b.Navigation("CheckIn");

                    b.Navigation("Vaga");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Gestao_de_Estacionamentos.Core.Dominio.ModuloFaturamento.Cargo", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Gestao_de_Estacionamentos.Core.Dominio.ModuloFaturamento.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Gestao_de_Estacionamentos.Core.Dominio.ModuloFaturamento.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Gestao_de_Estacionamentos.Core.Dominio.ModuloFaturamento.Cargo", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gestao_de_Estacionamentos.Core.Dominio.ModuloFaturamento.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Gestao_de_Estacionamentos.Core.Dominio.ModuloFaturamento.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gestao_de_Estacionamentos.Core.Dominio.ModuloEstacionamento.Vaga", b =>
                {
                    b.Navigation("VeiculoEstacionado");
                });

            modelBuilder.Entity("Gestao_de_Estacionamentos.Core.Dominio.ModuloFaturamento.Relatorio", b =>
                {
                    b.Navigation("Faturas");
                });

            modelBuilder.Entity("Gestao_de_Estacionamentos.Core.Dominio.ModuloRecepcao.CheckIn", b =>
                {
                    b.Navigation("Ticket")
                        .IsRequired();

                    b.Navigation("Veiculo")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
